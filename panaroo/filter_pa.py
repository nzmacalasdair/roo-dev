import os, sys

from .isvalid import *
from .__init__ import __version__


def filter_pa(pa_file, outdir, ftypes):
    basename = os.path.splitext(pa_file)[0]

    with open(pa_file, 'r') as infile, \
        open(outdir + basename + '_filt_' + '_'.join(ftypes) + '.csv', 'w') as pa_out, \
        open(outdir + basename + '_filt_' + '_'.join(ftypes) + '.Rtab', 'w') as rtab_out:
        header = next(infile)
        pa_out.write(header)
        header = ['Gene'] + header.strip().split(',')[3:]
        rtab_out.write('\t'.join(header) + '\n')
        lines = []
        for line in infile:
            line = line.strip().split(',')
            # perform filtering
            for i, gene in enumerate(line[3:]):
                if (('frag' in ftypes) and (';' in gene)) or \
                   (('pseudo' in ftypes) and ('pseudo' in gene)) or \
                    (('length' in ftypes) and ('len' in gene)):
                    line[3 + i] = ''

            # write to filtered files
            pa_out.write(','.join(line) + '\n')
            rtab_out.write('\t'.join(
                [line[0]] + ['0' if g == '' else '1'
                             for g in line[3:]]) + '\n')

    return


def get_options(args):
    import argparse

    description = 'Filters the Panaroo gene_presence_absence.csv file to exclude sequences '
    description += 'classed as length outliers, pseudogenes or fragmented.'
    parser = argparse.ArgumentParser(description=description,
                                     prog='panaroo_filter_pa')

    io_opts = parser.add_argument_group('Input/output')
    io_opts.add_argument(
        "-i",
        "--input",
        dest="input_file",
        required=True,
        help="input 'gene_presence_absence.csv' file generated by Panaroo",
        type=str)
    io_opts.add_argument("-o",
                         "--out_dir",
                         dest="output_dir",
                         required=True,
                         help="location of an output directory",
                         type=lambda x: is_valid_folder(parser, x))

    # Other options
    parser.add_argument(
        "--type",
        dest="type",
        help=
        "any combination of 'pseudo', 'length' or 'frag' separated by commas")
    parser.add_argument('--version',
                        action='version',
                        version='%(prog)s ' + __version__)

    args = parser.parse_args(args)
    return (args)


def main():
    args = get_options(sys.argv[1:])

    # make sure trailing forward slash is present
    args.output_dir = os.path.join(args.output_dir, "")

    filt_types = args.type.split(',')
    for filt_type in filt_types:
        if filt_type not in ['pseudo', 'length', 'frag']:
            raise ValueError("invalid input for 'type' parameter!")
    filter_pa(args.input_file, args.output_dir, filt_types)

    return


if __name__ == '__main__':
    main()
